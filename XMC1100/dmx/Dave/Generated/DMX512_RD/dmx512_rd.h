/**
 * @file dmx512_rd.h
 * @date 2016-07-08
 *
 * NOTE:
 * This file is generated by DAVE. Any manual modification done to this file will be lost when the code is regenerated.
 *
 * @cond
 ***********************************************************************************************************************
 * DMX512_RD v4.0.16 - Provides user configuration for DMX512 Application Stack.
 *                    Note: DIGITAL_IO APP is required to select DMX512 input as well as Accurate Break Detection input.
 *
 * Copyright (c) 2015-2016, Infineon Technologies AG
 * All rights reserved.                        
 *                                             
 * Redistribution and use in source and binary forms, with or without modification,are permitted provided that the           
 * following conditions are met:   
 *                                                                              
 *   Redistributions of source code must retain the above copyright notice, this list of conditions and the  following   
 *   disclaimer.                        
 * 
 *   Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following   
 *   disclaimer in the documentation and/or other materials provided with the distribution.     
 *                         
 *   Neither the name of the copyright holders nor the names of its contributors may be used to endorse or promote 
 *   products derived from this software without specific prior written permission. 
 *                                             
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,  
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE   
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, INDIRECT, INCIDENTAL,  
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR        
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,      
 * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  OF THE   
 * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.    
 *                                                                              
 * To improve the quality of the software, users are encouraged to share modifications, enhancements or bug fixes       
 * with Infineon Technologies AG (dave@infineon.com).         
 ***********************************************************************************************************************
 *
 * Change History
 * --------------
 * 2015-02-16:
 *     - Initial version for DAVEv4 <BR>
 * 2015-05-08:
 *     - API comments are modified. <BR>
 *
 * 2015-08-25:
 *     - Supported XMC14 device and added a variable in handler for Interrupt Source Selection of XMC14.<br>
 * 2016-07-08:
 *     - Fixed incorrect case for an included header.<br>
 *
 * @endcond 
 *
 */

#ifndef DMX512_RD_H
#define DMX512_RD_H

/***********************************************************************************************************************
 * HEADER FILES                                                                                                      
 **********************************************************************************************************************/
#include <xmc_uart.h>
#include <xmc_gpio.h>
#include <xmc_scu.h>
#include <DAVE_Common.h>
#include "dmx512_rd_conf.h"

#if (DMX512_RD_ACCURATE_BREAK_DET_USED == 1U)
#include <xmc_ccu4.h>
#include "../global_ccu4/global_ccu4.h"
#endif

 /**********************************************************************************************************************
 * MACROS
 **********************************************************************************************************************/
#if (!((XMC_LIB_MAJOR_VERSION == 2U) && \
       (XMC_LIB_MINOR_VERSION >= 0U) && \
       (XMC_LIB_PATCH_VERSION >= 0U)))
#error "DMX512_RD requires XMC Peripheral Library v2.0.0 or higher"
#endif

 /**********************************************************************************************************************
 * ENUMS
 **********************************************************************************************************************/
/**
 * @ingroup DMX512_RD_enumerations
 * @{
 */
/**
 * This enumeration indicates status of DMX512_RD APP
 */
typedef enum DMX512_RD_STATUS
{
  DMX512_RD_STATUS_SUCCESS = 0, /* Status Success if initialization is successful */
  DMX512_RD_STATUS_FAILURE      /* Status Failure if initialization is failed */
} DMX512_RD_STATUS_t;
/**
 * @}
 */

 /**********************************************************************************************************************
 * DATA STRUCTURES
 **********************************************************************************************************************/
/**
 * @ingroup DMX512_RD_datastructures
 * @{
 */
/**
 *  @brief Initialization data structure for DMX512_RD APP
 */
typedef struct DMX512_RD
{
/*******************************************
* Slot reception using USIC channel (UART) *
********************************************/
  XMC_USIC_t *uart_module; /**< USIC kernel base pointer */
  XMC_USIC_CH_t *uart_ch; /**< USIC slice base pointer */
  XMC_UART_CH_CONFIG_t uart_config; /**< UART configuration handle */
  const uint8_t uart_dx0_mux; /**< DX0 input channel used for Rx input */
#if UC_FAMILY == XMC1
  const uint8_t uart_dx3_mux; /**< DX3 input stage configuration */
  const uint8_t uart_dx5_mux; /**< DX5 input stage configuration */
#endif
  uint32_t uart_events_sr_no; /**< UART service request number */
  IRQn_Type uart_irq_no; /**< UART IRQ number */
  uint8_t uart_irq_priority; /**< UART IRQ priority */
#if UC_FAMILY == XMC4
  uint8_t uart_irq_subpriority; /**< UART IRQ sub-priority */
#endif
#if (UC_SERIES == XMC14)
  XMC_SCU_IRQCTRL_t uart_irq_source;
#endif
  bool acc_break_det; /**< Accurate break selection */

#if (DMX512_RD_ACCURATE_BREAK_DET_USED == 1U)
/******************************************************
* Accurate break detection using CCU4 slice (capture) *
*******************************************************/
  GLOBAL_CCU4_t *ccu4globalapp; /**< GLOBAL_CCU4 APP base pointer */
  XMC_CCU4_MODULE_t *capt_module; /**< CCU4 kernel base pointer */
  XMC_CCU4_SLICE_t *capt_slice; /**< CCU4 slice base pointer */
  uint8_t capt_slice_no; /**< CCU4 slice number */
  XMC_CCU4_SLICE_CAPTURE_CONFIG_t capt_config; /* Capture configuration */
  XMC_CCU4_SLICE_EVENT_CONFIG_t capt_event0_config; /**< Event0 configuration */
  XMC_CCU4_SLICE_EVENT_CONFIG_t capt_event1_config; /**< Event1 configuration */
  XMC_CCU4_SLICE_SR_ID_t capt_event_sr_no; /**< Capture service request number */
  IRQn_Type capt_irq_no; /**< Capture IRQ number */
  uint8_t capt_irq_priority; /**< Capture IRQ priority */
#if UC_FAMILY == XMC4
  uint8_t capt_irq_subpriority; /**< Capture IRQ sub-priority */
#endif
#if (UC_SERIES == XMC14)
  XMC_SCU_IRQCTRL_t capt_irq_source;
#endif
#endif

/*****************************************
* Slot data array                        *
******************************************/
  uint8_t *rx_array_ptr; /**< Pointer to a slot data array */
  void (*callback_function)(void); /**< Function pointer to user call-back */
  uint16_t start_slot_num; /**< First relevant slot number */
  uint16_t current_slot_num; /**< current slot number */
  const uint16_t no_of_slots; /**< number of slots count */
} DMX512_RD_t;

/**
 * @}
 */

#ifdef __cplusplus
extern "C" {
#endif
/***********************************************************************************************************************
 * API Prototypes
 **********************************************************************************************************************/
/**
 * @ingroup DMX512_RD_apidoc
 * @{
 */
/**
 * @brief Get DMX512_RD APP version
 * @return DAVE_APP_VERSION_t APP version information (major, minor and patch number)
 *
 * \par<b>Description: </b><br>
 * The function can be used to check application software compatibility with a
 * specific version of the APP.
 *
 * Example Usage:
 *
 * @code
 * #include <DAVE.h>
 *
 * int main(void) {
 *   DAVE_STATUS_t init_status;
 *   DAVE_APP_VERSION_t version;
 *
 *   // Initialize DMX512_RD APP:
 *   // DMX512_RD_Init() is called from within DAVE_Init().
 *   init_status = DAVE_Init();
 *
 *   version = DMX512_RD_GetAppVersion();
 *   if (version.major != 1U) {
 *     // Probably, not the right version.
 *   }
 *
 *   // More code here
 *   while(1) {
 *
 *   }
 *   return (0);
 * }
 * @endcode <BR>
 */
DAVE_APP_VERSION_t DMX512_RD_GetAppVersion(void);

/**
 * @brief Initializes USIC slice, CCU4 slice and NVIC nodes for DMX512 Application Stack.
 *
 * @param handle Base address of the DMX512_RD_t object
 * @return DMX512_RD_STATUS_t DMX512_RD_STATUS_SUCCESS: if the initialization succeeds.<BR>
 *                            DMX512_RD_STATUS_FAILURE  : for failure case.<BR>
 *
 * \par<b>Description:</b><br>
 * This function initializes a USIC slice for slot data reception and break validation. Optionally it \n
 * initializes a CCU4 slice for accurate break detection. Additionally, it initializes NVIC nodes for \n
 * UART and capture interrupts. \n
 * <B>Note: This function does not configure any IO pins. The user has to use a DIGITAL_TO APP to select \n
 * a UART input. Optionally ERU APPs (EVENT_DETECTOR, EVENT_GENERATOR) can be used to route pin signals \n
 * to the capture input for accurate break detection.</B>
 * <BR>
 *
 * \par<b>Related APIs:</b><BR>
 * None\n\n\n
 *
 * Example Usage: DMX512 receiving device functionality using Chauvet Obey DMX master. LED_LAMP APP is used to control the LED color.
 * Step1: Drag & Drop: DMX512_RD, LED_LAMP, DIGITAL_IO APPs
 * Step2: Configure 3 LED channels in LED_LAMP APP
 * Step3: Signal Connection: DIGITAL_IO -> DMX512_RD
 * Step4: Assign a pins for DMX512 input, assign LED outputs
 * @code
 *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 *
 *   int main(void)
 *   {
 *     DMX512_RD_STATUS_t init_status;
 *
 *   // Initialize DMX512_RD APP:
 *   // DMX512_RD_Init() is called from within DAVE_Init().
 *   init_status = DAVE_Init();
 *
 *   if (init_status == DMX512_RD_STATUS_SUCCESS)
 *     {
 *       // Add application code here
 *         while(1U)
 *         {
 *         }
 *     }
 *     else
 *     {
 *      XMC_DEBUG("main: Application initialization failed");
 *      while(1U)
 *      {
 *      }
 *     }
 *      return 0U;
 *  }
 *
 *  void DMX512_RD_UserCallBack (void)
 *  {
 *    // To update intensities of LEDs
 *    LED_LAMP_0.config->led_intensity[0] = DMX512_RD_0_rx_array[0]; // Red color
 *    LED_LAMP_0.config->led_intensity[1] = DMX512_RD_0_rx_array[1]; // Green color
 *    LED_LAMP_0.config->led_intensity[2] = DMX512_RD_0_rx_array[2]; // Blue color
 *    LED_LAMP_SetColor(&LED_LAMP_0);
 *  }
 *  @endcode <BR>
 */
DMX512_RD_STATUS_t DMX512_RD_Init(DMX512_RD_t *const handle);

/**
 * @brief Configures starting slot number run time. \n
 * <B>Note: This function shall only be called in user call-back function (which means during/before break detection)</B>
 *
 * @param handle Base address of the DMX512_RD_t object. \b Range: &DMX512_RD_0
 * @param slot_num Starting slot number. \b Range: 1 to 512.
 * @return void <BR>
 *
 * \par<b>Description:</b><br>
 * This function changes the first relevant slot run-time . When receiving the next DMX packet, \n
 * data will be stored from the new first relevant slot onwards and all preceding slots will be\n
 * ignored.
 * <BR>
 *
 * \par<b>Related APIs:</b><BR>
 * None\n\n\n
 *
 * Example Usage: DMX512 receiving device functionality using Chauvet Obey DMX master. LED_LAMP APP is used to control the LED color.
 * Step1: Drag & Drop: DMX512_RD, LED_LAMP, DIGITAL_IO APPs
 * Step2: Configure 3 LED channels in LED_LAMP APP
 * Step3: Signal Connection: DIGITAL_IO -> DMX512_RD
 * Step4: Assign a pins for DMX512 input, assign LED outputs
 * @code
 *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 *
 *   int main(void)
 *   {
 *     DMX512_RD_STATUS_t init_status;
 *
 *   // Initialize DMX512_RD APP:
 *   // DMX512_RD_Init() is called from within DAVE_Init().
 *   init_status = DAVE_Init();
 *
 *   if (init_status == DMX512_RD_STATUS_SUCCESS)
 *     {
 *       // Add application code here
 *         while(1U)
 *         {
 *         }
 *     }
 *     else
 *     {
 *      XMC_DEBUG("main: Application initialization failed");
 *      while(1U)
 *      {
 *      }
 *     }
 *      return 0U;
 *  }
 *
 *  void DMX512_RD_UserCallBack (void)
 *  {
 *    // To update intensities of LEDs
 *    LED_LAMP_0.config->led_intensity[0] = DMX512_RD_0_rx_array[0]; // Red color
 *    LED_LAMP_0.config->led_intensity[1] = DMX512_RD_0_rx_array[1]; // Green color
 *    LED_LAMP_0.config->led_intensity[2] = DMX512_RD_0_rx_array[2]; // Blue color
 *    LED_LAMP_SetColor(&LED_LAMP_0);
 *    // Change the first relevant slot to slot 4
 *    DMX512_RD_ConfigStartSlotNo(&DMX512_RD_0, 4);
 *
 *  }
 *  @endcode <BR>
 */
DMX512_RD_STATUS_t DMX512_RD_ConfigStartSlotNo(DMX512_RD_t *const handle, uint32_t slot_num);

#if (DMX512_RD_ACCURATE_BREAK_DET_USED == 1U)
/**
 * @brief Validates accurate break detection.\n
 * <B>Note: This function will be called by CCU4 IRQ handler; the user does not need to call this API explicitly.</B>
 *
 * @param handle Base address of the DMX512_RD_t object. \b Range: &DMX512_RD_0
 * @return void <BR>
 *
 * \par<b>Description:</b><br>
 * This function validates the break duration accurately. On successful validation it enables the UART receive interrupt to receive slot data.
 * Once successful, the received slot data gets stored into <InstanceLabel>_rx_array[no_of_slots].
 * <BR>
 */
void DMX512_RD_Capt_IRQHandler(DMX512_RD_t *const handle);
#endif

/**
 * @brief Receives slot data, and optionally validates break detection using USIC's synchronization
 * break detection feature.\n
 * <B>Note: This function is called by USIC IRQ handler; the user does not need to call this API explicitly.</B>
 *
 * @param handle Base address of the DMX512_RD_t object. \b Range: &DMX512_RD_0
 * @return void <BR>
 *
 * \par<b>Description:</b><br>
 * This function receives slot data based on starting slot number and number of slots. It also validates the
 * break detection but it is not accurate and may accept breaks that are too short.
 * Successfully received slot data is stored in <InstanceLabel>_rx_array[no_of_slots].
 * <BR>
 *
 */
void DMX512_RD_UART_IRQHandler(DMX512_RD_t *const handle);

/**
 * @}
 */

#ifdef __cplusplus
}
#endif   

#include "dmx512_rd_extern.h"

#endif /* End of DMX512_RD_H */
